<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
             http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 配置C3P0连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" lazy-init="false">
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="50"/>
        <property name="maxWait" value="30000"/>

        <property name="filters" value="stat,wall"/>
        <property name="timeBetweenEvictionRunsMillis" value="3000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20"/>
    </bean>

    <!-- 配置DAO -->
    <bean id="accountDao" class="com.cnc.my.spring.da.transaction.spring_transaction.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置Service -->
    <bean id="accountService"
          class="com.cnc.my.spring.da.transaction.spring_transaction.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"/>
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--  ************** 基于注解的事务配置 *************  -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--  ************** 基于xml的事务配置 *************  -->
<!--   基于xml配置的事务模式核心思想就是给予SpringAOP或者AspectJ的面向切面编程感知  -->
    <!-- 配置事务增强 -->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;-->
<!--                 propagation:事务传播行为:-->
<!--                 isolation:隔离级别-->
<!--                 read-only:是否为只读事务.-->
<!--                 timeout    :是否超时.-->
<!--                 rollback-for:类似-Exception.发生哪些异常回滚事务.-->
<!--                 no-rollback-for:类似+Exception.发生哪些异常不回滚.-->
<!--              &ndash;&gt;-->
<!--            <tx:method name="transfer" propagation="REQUIRED"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    &lt;!&ndash; AOP的配置 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:pointcut-->
<!--                expression="execution(* com.cnc.my.spring.da.transaction.spring_transaction.service.impl.AccountServiceImpl.*(..))"-->
<!--                id="pointcut"/>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->


</beans>